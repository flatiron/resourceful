
> resourceful@0.3.3 test /home/rick/Projects/resourceful
> vows --spec

 
  â™¢ resourceful/events 
  
  an Article with a 'success' listener on save
    âœ“ should add the bound method to factory's listeners array
  an Article with a 'success' listener on save when calling save() on an instance of Article
    âœ“ should trigger the bound function
  
  â™¢ resourceful/hooks/sync 
  
  another Resource (save) synchronous 'after' hooks on save
    âœ“ should have two 'after' hooks registered
  another Resource (create) with synchronous 'after' hooks on create
    âœ“ should have two 'after' hooks registered
  a Resource (save) synchronous 'before' hooks on save when calling save() on an instance of Article
    âœ“ should trigger both hooks in the right order
  a Resource (create) with synchronous 'before' hooks on create when calling create() on an instance of Article
    âœ“ should trigger both hooks in the right order
  another Resource (save) synchronous 'after' hooks on save when calling save() on an instance of Article
    âœ“ should trigger both hooks in the right order
  another Resource (create) with synchronous 'after' hooks on create when calling create() on an instance of Article
    âœ“ should trigger both hooks in the right order
  
  â™¢ resourceful/redis/relationship 
  
  In database "test" with defined resources "forum"
    âœ“ will be successful
  In database "test" with defined resources "user"
    âœ“ will be successful
  In database "test" with defined resources "repository"
    âœ“ will be successful
  In database "test" with defined resources "pull_request"
    âœ“ will be successful
  In database "test" with defined resources "team"
    âœ“ will be successful
  In database "test" with defined resources "member"
    âœ“ will be successful
  In database "test" with defined resources "membership"
    âœ“ will be successful
  In database "test" with defined resources "follower"
    âœ“ will be successful
  In database "test" with defined resources "following"
    âœ“ will be successful
'resourceful:test:id:user/pavan ---> {"name":"pavan","resource":"User","repository_ids":["bullet","octonode"],"membership_ids":["nodejitsu","nodeapps"],"follower_ids":["marak","christian"],"following_ids":["marak"],"id":"user/pavan"}'
  In database 'test' getting an user named 'pavan'
    âœ“ should be successful
  In database 'test' getting an user named 'pavan' and it should have children repositories
    âœ“ in an array
'resourceful:test:id:repository/user/pavan/bullet ---> {"name":"bullet","resource":"Repository","user_id":"pavan","id":"repository/user/pavan/bullet"}'
  In database 'test' getting an user named 'pavan' and it should have children repositories and when 'Parent.getChild()' is used
    âœ“ should return one repository
    âœ“ should be of proper resource type
    âœ“ should have the user_id set correctly
'resourceful:test:id:repository/user/pavan/bullet ---> {"name":"bullet","resource":"Repository","user_id":"pavan","id":"repository/user/pavan/bullet"}'
  In database 'test' getting an user named 'pavan' and it should have children repositories and when 'Parent.prototype.getChild()' is used
    âœ“ should return one repository
    âœ“ should be of proper resource type
    âœ“ should have the user_id set correctly
'resourceful:test:id:repository/user/pavan/pants ---> null'
  In database 'test' getting an user named 'pavan' and it should have children repositories and when 'Parent.getChild()' is used with an invalid child id
    âœ“ should return 404
  In database 'test' getting an user named 'pavan' and it should have children repositories and when 'Parent.children()' is used
    âœ— should return them 
        Â» [33m       
        [32mactual[39m [31mexpected[39m 
         
        user/pavan/[32mbulle[39m[31moc[39mt[31monode[39m 
        [39m[90m // relationship-test.js:59[39m
    âœ“ should be of proper resource type
    âœ“ should have the user_id set correctly
  In database 'test' getting an user named 'pavan' and it should have children repositories and when 'Parent.prototype.children()' is used
    âœ— should return them 
        Â» [33m       
        [32mactual[39m [31mexpected[39m 
         
        user/pavan/[32mbulle[39m[31moc[39mt[31monode[39m 
        [39m[90m // relationship-test.js:82[39m
    âœ“ should be of proper resource type
    âœ“ should have the user_id set correctly
'resourceful:test:id:user/christian ---> {"name":"christian","resource":"User","repository_ids":["repository-1","repository-2"],"membership_ids":["nodejitsu"],"follower_ids":[],"following_ids":["marak","pavan"],"id":"user/christian"}'
  In database 'test' getting an user named 'christian'
    âœ“ should be successful
'resourceful:test:id:user/christian ---> {"name":"christian","resource":"User","repository_ids":["repository-1","repository-2"],"membership_ids":["nodejitsu"],"follower_ids":[],"following_ids":["marak","pavan"],"id":"user/christian"}'
  In database 'test' getting an user named 'christian' and when 'Parent.prototype.createChild()' is used successfully
    âœ“ should return the newly created object
    âœ“ should set the user_id correctly
'resourceful:test:id:user/christian ---> {"id":"resourceful:test:id:user/christian","name":"christian","repository_ids":["repository-1","repository-2","issues"],"membership_ids":["nodejitsu"],"follower_ids":[],"following_ids":["marak","pavan"],"resource":"User"}'
  In database 'test' getting an user named 'christian' and when 'Parent.prototype.createChild()' is used successfully and reloading parent object
    âœ“ should be successful
    âœ“ should contain the new child object in the array
'resourceful:test:id:repository/user/christian/issues ---> {"id":"resourceful:test:id:repository/user/christian/issues","name":"issues","user_id":"christian","pull_request_ids":[],"resource":"Repository"}'
  In database 'test' getting an user named 'christian' and when 'Parent.prototype.createChild()' is used successfully should create the record in the db
    âœ“ should respond with the right object
'resourceful:test:id:user/marak ---> {"name":"marak","resource":"User","repository_ids":["colors","npmtop"],"membership_ids":["nodedocs","nodejitsu","nodeapps"],"follower_ids":["pavan","christian"],"following_ids":["pavan"],"id":"user/marak"}'
  In database 'test' getting an user named 'marak'
    âœ“ should be successful
'resourceful:test:id:user/marak ---> {"name":"marak","resource":"User","repository_ids":["colors","npmtop"],"membership_ids":["nodedocs","nodejitsu","nodeapps"],"follower_ids":["pavan","christian"],"following_ids":["pavan"],"id":"user/marak"}'
  In database 'test' getting an user named 'marak' and when 'Parent.createChild()' is used successfully
    âœ“ should return the newly created object
    âœ“ should set the user_id correctly
'resourceful:test:id:repository/user/marak/haibu ---> {"id":"resourceful:test:id:repository/user/marak/haibu","name":"haibu","user_id":"marak","pull_request_ids":[],"resource":"Repository"}'
  In database 'test' getting an user named 'marak' and when 'Parent.createChild()' is used successfully should create the record in the db
    âœ“ should respond with the right object
'resourceful:test:id:user/marak ---> {"id":"resourceful:test:id:user/marak","name":"marak","repository_ids":["colors","npmtop","haibu"],"membership_ids":["nodedocs","nodejitsu","nodeapps"],"follower_ids":["pavan","christian"],"following_ids":["pavan"],"resource":"User"}'
  In database 'test' getting an user named 'marak' and when 'Parent.createChild()' is used successfully and reloading parent object
    âœ“ should be successful
    âœ“ should contain the new child object in the array
'resourceful:test:id:repository/user/pavan/bullet ---> {"name":"bullet","resource":"Repository","user_id":"pavan","id":"repository/user/pavan/bullet"}'
  In database 'test' getting a repository 'user/pavan/bullet'
    âœ“ should be successful
    âœ“ should have user_id 'pavan'
'resourceful:test:id:user/pavan ---> {"name":"pavan","resource":"User","repository_ids":["bullet","octonode"],"membership_ids":["nodejitsu","nodeapps"],"follower_ids":["marak","christian"],"following_ids":["marak"],"id":"user/pavan"}'
  In database 'test' getting a repository 'user/pavan/bullet' and when 'Child.prototype.parent()' is used
    âœ“ should return the parent
    âœ“ should be of proper resource type
    âœ“ should have the children ids
'resourceful:test:id:user/pavan ---> {"name":"pavan","resource":"User","repository_ids":["bullet","octonode"],"membership_ids":["nodejitsu","nodeapps"],"follower_ids":["marak","christian"],"following_ids":["marak"],"id":"user/pavan"}'
  In database 'test' getting an user named 'pavan'
    âœ“ should be successful
    âœ“ should have children repositories
[ { id: 'user/pavan/octonode',
    name: 'octonode',
    user_id: 'pavan',
    pull_request_ids: [],
    resource: 'Repository' },
  { id: 'user/pavan/bullet',
    name: 'bullet',
    user_id: 'pavan',
    pull_request_ids: [],
    resource: 'Repository' } ]
  In database 'test' getting an user named 'pavan' and when 'Child.byParent()' is used
    âœ— should return the children 
        Â» [33m       
        [32mactual[39m [31mexpected[39m 
         
        user/pavan/[32mbulle[39m[31moc[39mt[31monode[39m 
        [39m[90m // relationship-test.js:340[39m
    âœ“ should be of proper resource type
    âœ“ should have the parent id set correctly
'resourceful:test:id:repository/user/christian/issues ---> {"id":"resourceful:test:id:repository/user/christian/issues","name":"issues","user_id":"christian","pull_request_ids":[],"resource":"Repository"}'
  In database 'test' getting a repository 'user/christian/issues'
    âœ“ should be successful
    âœ“ should have the correct user_id
'resourceful:test:id:user/christian ---> {"id":"resourceful:test:id:user/christian","name":"christian","repository_ids":["repository-1","repository-2","issues"],"membership_ids":["nodejitsu"],"follower_ids":[],"following_ids":["marak","pavan"],"resource":"User"}'
  In database 'test' getting a repository 'user/christian/issues' and getting the parent
    âœ“ should be successful
{ id: 'user/christian/issues',
  name: 'issues',
  user_id: 'christian',
  pull_request_ids: [],
  resource: 'Repository' }
'resourceful:test:id:repository/user/christian/issues ---> {"id":"resourceful:test:id:repository/user/christian/issues","name":"issues","user_id":"christian","pull_request_ids":[],"resource":"Repository"}'
'resourceful:test:id:user/christian ---> {"id":"resourceful:test:id:user/christian","name":"christian","repository_ids":["repository-1","repository-2","issues"],"membership_ids":["nodejitsu"],"follower_ids":[],"following_ids":["marak","pavan"],"resource":"User"}'
'resourceful:test:id:repository/user/christian/issues ---> {"id":"resourceful:test:id:repository/user/christian/issues","name":"issues","user_id":"christian","pull_request_ids":[],"resource":"Repository"}'
'resourceful:test:id:repository/user/christian/issues/*'
[]
  In database 'test' getting a repository 'user/christian/issues' and getting the parent and destroying the child
    âœ— should be successful 
        Â» [33mexpected [1m[][22m to be an Object[39m[90m // relationship-test.js:395[39m
'resourceful:test:id:user/christian ---> {"id":"resourceful:test:id:user/christian","name":"christian","repository_ids":["repository-1","repository-2"],"membership_ids":["nodejitsu"],"follower_ids":[],"following_ids":["marak","pavan"],"resource":"User"}'
  In database 'test' getting a repository 'user/christian/issues' and getting the parent and destroying the child should result in parent
    âœ“ being modified in the db
'resourceful:test:id:user/christian ---> {"id":"resourceful:test:id:user/christian","name":"christian","repository_ids":["repository-1","repository-2"],"membership_ids":["nodejitsu"],"follower_ids":[],"following_ids":["marak","pavan"],"resource":"User"}'
  In database 'test' getting an user named 'christian'
    âœ“ should be successful
'resourceful:test:id:user/christian ---> {"id":"resourceful:test:id:user/christian","name":"christian","repository_ids":["repository-1","repository-2"],"membership_ids":["nodejitsu"],"follower_ids":[],"following_ids":["marak","pavan"],"resource":"User"}'
'resourceful:test:id:repository/user/christian/repository-1 ---> {"name":"repository-1","resource":"Repository","pull_request_ids":["1"],"user_id":"christian","id":"repository/user/christian/repository-1"}'
'resourceful:test:id:user/christian ---> {"id":"resourceful:test:id:user/christian","name":"christian","repository_ids":["repository-1","repository-2"],"membership_ids":["nodejitsu"],"follower_ids":[],"following_ids":["marak","pavan"],"resource":"User"}'
'resourceful:test:id:repository/user/christian/repository-1 ---> {"name":"repository-1","resource":"Repository","pull_request_ids":["1"],"user_id":"christian","id":"repository/user/christian/repository-1"}'
'resourceful:test:id:repository/user/christian/repository-1/*'
[]
'resourceful:test:id:repository/user/christian/repository-2 ---> {"name":"repository-2","resource":"Repository","user_id":"christian","id":"repository/user/christian/repository-2"}'
'resourceful:test:id:user/christian ---> {"id":"resourceful:test:id:user/christian","name":"christian","repository_ids":["repository-2"],"membership_ids":["nodejitsu"],"follower_ids":[],"following_ids":["marak","pavan"],"resource":"User"}'
'resourceful:test:id:repository/user/christian/repository-2 ---> {"name":"repository-2","resource":"Repository","user_id":"christian","id":"repository/user/christian/repository-2"}'
'resourceful:test:id:repository/user/christian/repository-2/*'
[]
'resourceful:test:id:user/christian ---> {"id":"resourceful:test:id:user/christian","name":"christian","repository_ids":[],"membership_ids":["nodejitsu"],"follower_ids":[],"following_ids":["marak","pavan"],"resource":"User"}'
'resourceful:test:id:membership/user/christian/nodejitsu ---> {"team":"nodejitsu","resource":"Membership","user_id":"christian","id":"membership/user/christian/nodejitsu"}'
'resourceful:test:id:user/christian ---> {"id":"resourceful:test:id:user/christian","name":"christian","repository_ids":[],"membership_ids":["nodejitsu"],"follower_ids":[],"following_ids":["marak","pavan"],"resource":"User"}'
'resourceful:test:id:membership/user/christian/nodejitsu/*'
[]
'resourceful:test:id:user/christian ---> {"id":"resourceful:test:id:user/christian","name":"christian","repository_ids":[],"membership_ids":[],"follower_ids":[],"following_ids":["marak","pavan"],"resource":"User"}'
'resourceful:test:id:user/christian ---> {"id":"resourceful:test:id:user/christian","name":"christian","repository_ids":[],"membership_ids":[],"follower_ids":[],"following_ids":["marak","pavan"],"resource":"User"}'
'resourceful:test:id:following/user/christian/pavan ---> {"name":"pavan","resource":"Following","user_id":"christian","id":"following/user/christian/pavan"}'
'resourceful:test:id:user/christian ---> {"id":"resourceful:test:id:user/christian","name":"christian","repository_ids":[],"membership_ids":[],"follower_ids":[],"following_ids":["marak","pavan"],"resource":"User"}'
'resourceful:test:id:following/user/christian/pavan/*'
[]
'resourceful:test:id:following/user/christian/marak ---> {"name":"marak","resource":"Following","user_id":"christian","id":"following/user/christian/marak"}'
'resourceful:test:id:user/christian ---> {"id":"resourceful:test:id:user/christian","name":"christian","repository_ids":[],"membership_ids":[],"follower_ids":[],"following_ids":["marak"],"resource":"User"}'
'resourceful:test:id:following/user/christian/marak/*'
[]
'resourceful:test:id:user/christian/*'
[]
  In database 'test' getting an user named 'christian' and destroying it
    âœ— should be successful 
        Â» [33mexpected [1m[][22m to be an Object[39m[90m // relationship-test.js:432[39m
'resourceful:test:id:following/user/christian/marak ---> null'
  In database 'test' getting an user named 'christian' and destroying it should result in his followings
    âœ“ getting destroyed
'resourceful:test:id:repository/user/christian/repository-1 ---> null'
  In database 'test' getting an user named 'christian' and destroying it should result in his repositories
    âœ“ getting destroyed
'resourceful:test:id:membership/user/christian/nodejitsu ---> null'
  In database 'test' getting an user named 'christian' and destroying it should result in his memberships
    âœ“ getting destroyed
'resourceful:test:id:pull_request/repository/user/christian/repository-1/1 ---> {"title":"Resourceful rocks!","resource":"PullRequest","repository_id":"user/christian/repository-1","id":"pull_request/repository/user/christian/repository-1/1"}'
{ id: 'repository/user/christian/repository-1/1',
  title: 'Resourceful rocks!',
  repository_id: 'user/christian/repository-1',
  resource: 'PullRequest' }
  In database 'test' pull requests of repositories of 'christian'
    âœ— should be destroyed 
      TypeError: Cannot read property 'status' of null 
      at Object.engines.forEach.vows.describe.addBatch.addBatch.addBatch.addBatch.addBatch.addBatch.addBatch.addBatch.addBatch.In database 'test'.pull requests of repositories of 'christian'.should be destroyed (/home/rick/Projects/resourceful/test/relationship-test.js:477:27) 
      at runTest (/home/rick/Projects/resourceful/node_modules/vows/lib/vows.js:132:26) 
      at EventEmitter.<anonymous> (/home/rick/Projects/resourceful/node_modules/vows/lib/vows.js:78:9) 
      at EventEmitter.emit (events.js:115:20) 
      at EventEmitter.vows.describe.options.Emitter.emit (/home/rick/Projects/resourceful/node_modules/vows/lib/vows.js:237:24) 
      at env.callback.that.emitter.ctx (/home/rick/Projects/resourceful/node_modules/vows/lib/vows/context.js:32:52) 
      at env.callback (/home/rick/Projects/resourceful/node_modules/vows/lib/vows/context.js:46:29) 
      at Resource.get (/home/rick/Projects/resourceful/lib/resourceful/resource.js:220:7) 
      at Resource._request (/home/rick/Projects/resourceful/lib/resourceful/resource.js:167:13) 
      at loop (/home/rick/Projects/resourceful/lib/resourceful/resource.js:91:9)
'resourceful:test:id:forum/develop ---> {"name":"develop","resource":"Forum","forum_id":null,"forum_ids":["nodejitsu","flatiron"],"id":"forum/develop"}'
  In database 'test' getting a forum named 'develop'
    âœ“ should be successful
  In database 'test' getting a forum named 'develop' when Child.prototype.Parent() is used
    âœ“ should return parent as 'null'
  In database 'test' getting a forum named 'develop' when Parent.prototype.children() is called
    âœ“ should return nodejitsu and flatiron
'resourceful:test:id:forum/forum/develop/nodejitsu ---> {"name":"nodejitsu","resource":"Forum","forum_id":"develop","forum_ids":["orchestrion","conservatory"],"id":"forum/forum/develop/nodejitsu"}'
  In database 'test' getting a forum named 'nodejitsu'
    âœ“ should be successful
'resourceful:test:id:forum/develop ---> {"name":"develop","resource":"Forum","forum_id":null,"forum_ids":["nodejitsu","flatiron"],"id":"forum/develop"}'
  In database 'test' getting a forum named 'nodejitsu' when Child.prototype.Parent() is used
    âœ“ should return parent forum
'resourceful:test:id:forum/forum/develop/nodejitsu ---> {"name":"nodejitsu","resource":"Forum","forum_id":"develop","forum_ids":["orchestrion","conservatory"],"id":"forum/forum/develop/nodejitsu"}'
  In database 'test' getting a forum named 'nodejitsu' when Parent.prototype.createChild() is called
    âœ“ should be successful
'resourceful:test:id:forum/develop ---> {"name":"develop","resource":"Forum","forum_id":null,"forum_ids":["nodejitsu","flatiron"],"id":"forum/develop"}'
  In database 'test' getting a forum named 'develop'
    âœ“ should be successful
'resourceful:test:id:forum/develop ---> {"name":"develop","resource":"Forum","forum_id":null,"forum_ids":["nodejitsu","flatiron"],"id":"forum/develop"}'
'resourceful:test:id:forum/develop ---> {"name":"develop","resource":"Forum","forum_id":null,"forum_ids":["nodejitsu","flatiron"],"id":"forum/develop"}'
'resourceful:test:id:forum/forum/develop/nodejitsu ---> {"id":"resourceful:test:id:forum/forum/develop/nodejitsu","name":"nodejitsu","forum_id":"develop","forum_ids":["orchestrion","conservatory","haibu"],"resource":"Forum"}'
'resourceful:test:id:forum/develop ---> {"name":"develop","resource":"Forum","forum_id":null,"forum_ids":["nodejitsu","flatiron"],"id":"forum/develop"}'
'resourceful:test:id:forum/forum/develop/nodejitsu ---> {"id":"resourceful:test:id:forum/forum/develop/nodejitsu","name":"nodejitsu","forum_id":"develop","forum_ids":["orchestrion","conservatory","haibu"],"resource":"Forum"}'
'resourceful:test:id:forum/forum/forum/develop/nodejitsu/conservatory ---> {"name":"conservatory","resource":"Forum","forum_id":"forum/develop/nodejitsu","forum_ids":[],"id":"forum/forum/forum/develop/nodejitsu/conservatory"}'
'resourceful:test:id:forum/forum/develop/nodejitsu ---> {"id":"resourceful:test:id:forum/forum/develop/nodejitsu","name":"nodejitsu","forum_id":"develop","forum_ids":["orchestrion","conservatory","haibu"],"resource":"Forum"}'
'resourceful:test:id:forum/forum/forum/develop/nodejitsu/conservatory ---> {"name":"conservatory","resource":"Forum","forum_id":"forum/develop/nodejitsu","forum_ids":[],"id":"forum/forum/forum/develop/nodejitsu/conservatory"}'
'resourceful:test:id:forum/forum/forum/develop/nodejitsu/conservatory/*'
[]
'resourceful:test:id:forum/forum/forum/develop/nodejitsu/haibu ---> {"id":"resourceful:test:id:forum/forum/forum/develop/nodejitsu/haibu","name":"haibu","forum_id":"forum/develop/nodejitsu","forum_ids":[],"resource":"Forum"}'
'resourceful:test:id:forum/forum/develop/nodejitsu ---> {"id":"resourceful:test:id:forum/forum/develop/nodejitsu","name":"nodejitsu","forum_id":"develop","forum_ids":["orchestrion","haibu"],"resource":"Forum"}'
'resourceful:test:id:forum/forum/forum/develop/nodejitsu/haibu ---> {"id":"resourceful:test:id:forum/forum/forum/develop/nodejitsu/haibu","name":"haibu","forum_id":"forum/develop/nodejitsu","forum_ids":[],"resource":"Forum"}'
'resourceful:test:id:forum/forum/forum/develop/nodejitsu/haibu/*'
[]
'resourceful:test:id:forum/forum/forum/develop/nodejitsu/orchestrion ---> {"name":"orchestrion","resource":"Forum","forum_id":"forum/develop/nodejitsu","forum_ids":[],"id":"forum/forum/forum/develop/nodejitsu/orchestrion"}'
'resourceful:test:id:forum/forum/develop/nodejitsu ---> {"id":"resourceful:test:id:forum/forum/develop/nodejitsu","name":"nodejitsu","forum_id":"develop","forum_ids":["orchestrion"],"resource":"Forum"}'
'resourceful:test:id:forum/forum/forum/develop/nodejitsu/orchestrion ---> {"name":"orchestrion","resource":"Forum","forum_id":"forum/develop/nodejitsu","forum_ids":[],"id":"forum/forum/forum/develop/nodejitsu/orchestrion"}'
'resourceful:test:id:forum/forum/forum/develop/nodejitsu/orchestrion/*'
[]
'resourceful:test:id:forum/forum/develop/nodejitsu/*'
[]
'resourceful:test:id:forum/forum/develop/flatiron ---> {"name":"flatiron","resource":"Forum","forum_id":"develop","forum_ids":[],"id":"forum/forum/develop/flatiron"}'
'resourceful:test:id:forum/develop ---> {"id":"resourceful:test:id:forum/develop","name":"develop","forum_id":null,"forum_ids":["flatiron"],"resource":"Forum"}'
'resourceful:test:id:forum/forum/develop/flatiron ---> {"name":"flatiron","resource":"Forum","forum_id":"develop","forum_ids":[],"id":"forum/forum/develop/flatiron"}'
'resourceful:test:id:forum/forum/develop/flatiron/*'
[]
'resourceful:test:id:forum/develop/*'
[]
  In database 'test' getting a forum named 'develop' and destroying it
    âœ— should be successful 
        Â» [33mexpected [1m[][22m to be an Object[39m[90m // relationship-test.js:579[39m
'resourceful:test:id:forum/forum/forum/develop/nodejitsu/haibu ---> null'
  In database 'test' getting a forum named 'develop' and destroying it should result in 'haibu' forum
    âœ“ getting destroyed
  
  â™¢ resourceful/memory/relationship 
  
  In database "test" with defined resources "forum"
    âœ“ will be successful
  In database "test" with defined resources "user"
    âœ“ will be successful
  In database "test" with defined resources "repository"
    âœ“ will be successful
  In database "test" with defined resources "pull_request"
    âœ“ will be successful
  In database "test" with defined resources "team"
    âœ“ will be successful
  In database "test" with defined resources "member"
    âœ“ will be successful
  In database "test" with defined resources "membership"
    âœ“ will be successful
  In database "test" with defined resources "follower"
    âœ“ will be successful
  In database "test" with defined resources "following"
    âœ“ will be successful
  In database 'test' getting an user named 'pavan'
    âœ“ should be successful
  In database 'test' getting an user named 'pavan' and it should have children repositories
    âœ“ in an array
  In database 'test' getting an user named 'pavan' and it should have children repositories and when 'Parent.children()' is used
    âœ“ should return them
    âœ“ should be of proper resource type
    âœ“ should have the user_id set correctly
  In database 'test' getting an user named 'pavan' and it should have children repositories and when 'Parent.prototype.children()' is used
    âœ“ should return them
    âœ“ should be of proper resource type
    âœ“ should have the user_id set correctly
  In database 'test' getting an user named 'pavan' and it should have children repositories and when 'Parent.getChild()' is used
    âœ“ should return one repository
    âœ“ should be of proper resource type
    âœ“ should have the user_id set correctly
  In database 'test' getting an user named 'pavan' and it should have children repositories and when 'Parent.prototype.getChild()' is used
    âœ“ should return one repository
    âœ“ should be of proper resource type
    âœ“ should have the user_id set correctly
  In database 'test' getting an user named 'pavan' and it should have children repositories and when 'Parent.getChild()' is used with an invalid child id
    âœ“ should return 404
  In database 'test' getting an user named 'christian'
    âœ“ should be successful
  In database 'test' getting an user named 'christian' and when 'Parent.prototype.createChild()' is used successfully
    âœ“ should return the newly created object
    âœ“ should set the user_id correctly
  In database 'test' getting an user named 'christian' and when 'Parent.prototype.createChild()' is used successfully and reloading parent object
    âœ“ should be successful
    âœ“ should contain the new child object in the array
  In database 'test' getting an user named 'christian' and when 'Parent.prototype.createChild()' is used successfully should create the record in the db
    âœ“ should respond with the right object
  In database 'test' getting an user named 'marak'
    âœ“ should be successful
  In database 'test' getting an user named 'marak' and when 'Parent.createChild()' is used successfully
    âœ“ should return the newly created object
    âœ“ should set the user_id correctly
  In database 'test' getting an user named 'marak' and when 'Parent.createChild()' is used successfully and reloading parent object
    âœ“ should be successful
    âœ“ should contain the new child object in the array
  In database 'test' getting an user named 'marak' and when 'Parent.createChild()' is used successfully should create the record in the db
    âœ“ should respond with the right object
  In database 'test' getting a repository 'user/pavan/bullet'
    âœ“ should be successful
    âœ“ should have user_id 'pavan'
  In database 'test' getting a repository 'user/pavan/bullet' and when 'Child.prototype.parent()' is used
    âœ“ should return the parent
    âœ“ should be of proper resource type
    âœ“ should have the children ids
  In database 'test' getting an user named 'pavan'
    âœ“ should be successful
    âœ“ should have children repositories
[ { id: 'user/pavan/bullet',
    name: 'bullet',
    user_id: 'pavan',
    pull_request_ids: [],
    resource: 'Repository' },
  { id: 'user/pavan/octonode',
    name: 'octonode',
    user_id: 'pavan',
    pull_request_ids: [],
    resource: 'Repository' } ]
  In database 'test' getting an user named 'pavan' and when 'Child.byParent()' is used
    âœ“ should return the children
    âœ“ should be of proper resource type
    âœ“ should have the parent id set correctly
  In database 'test' getting a repository 'user/christian/issues'
    âœ“ should be successful
    âœ“ should have the correct user_id
  In database 'test' getting a repository 'user/christian/issues' and getting the parent
    âœ“ should be successful
{ id: 'user/christian/issues',
  name: 'issues',
  user_id: 'christian',
  pull_request_ids: [],
  resource: 'Repository' }
  In database 'test' getting a repository 'user/christian/issues' and getting the parent and destroying the child
    âœ“ should be successful
  In database 'test' getting a repository 'user/christian/issues' and getting the parent and destroying the child should result in parent
    âœ“ being modified in the db
  In database 'test' getting an user named 'christian'
    âœ“ should be successful
  In database 'test' getting an user named 'christian' and destroying it
    âœ“ should be successful
  In database 'test' getting an user named 'christian' and destroying it should result in his repositories
    âœ“ getting destroyed
  In database 'test' getting an user named 'christian' and destroying it should result in his followings
    âœ“ getting destroyed
  In database 'test' getting an user named 'christian' and destroying it should result in his memberships
    âœ“ getting destroyed
undefined
  In database 'test' pull requests of repositories of 'christian'
    âœ“ should be destroyed
  In database 'test' getting a forum named 'develop'
    âœ“ should be successful
  In database 'test' getting a forum named 'develop' when Child.prototype.Parent() is used
    âœ“ should return parent as 'null'
  In database 'test' getting a forum named 'develop' when Parent.prototype.children() is called
    âœ“ should return nodejitsu and flatiron
  In database 'test' getting a forum named 'nodejitsu'
    âœ“ should be successful
  In database 'test' getting a forum named 'nodejitsu' when Child.prototype.Parent() is used
    âœ“ should return parent forum
  In database 'test' getting a forum named 'nodejitsu' when Parent.prototype.createChild() is called
    âœ“ should be successful
  In database 'test' getting a forum named 'develop'
    âœ“ should be successful
  In database 'test' getting a forum named 'develop' and destroying it
    âœ“ should be successful
  In database 'test' getting a forum named 'develop' and destroying it should result in 'haibu' forum
    âœ“ getting destroyed
  
  â™¢ resourceful/couchdb/relationship 
  
  In database "test" with defined resources "forum"
    âœ“ will be successful
  In database "test" with defined resources "user"
    âœ“ will be successful
  In database "test" with defined resources "repository"
    âœ“ will be successful
  In database "test" with defined resources "pull_request"
    âœ“ will be successful
  In database "test" with defined resources "team"
    âœ“ will be successful
  In database "test" with defined resources "member"
    âœ“ will be successful
  In database "test" with defined resources "membership"
    âœ“ will be successful
  In database "test" with defined resources "follower"
    âœ“ will be successful
  In database "test" with defined resources "following"
    âœ“ will be successful
  In database 'test' getting an user named 'pavan'
    âœ“ should be successful
  In database 'test' getting an user named 'pavan' and it should have children repositories
    âœ“ in an array
  In database 'test' getting an user named 'pavan' and it should have children repositories and when 'Parent.getChild()' is used with an invalid child id
    âœ“ should return 404
  In database 'test' getting an user named 'pavan' and it should have children repositories and when 'Parent.getChild()' is used
    âœ“ should return one repository
    âœ“ should be of proper resource type
    âœ“ should have the user_id set correctly
  In database 'test' getting an user named 'pavan' and it should have children repositories and when 'Parent.prototype.getChild()' is used
    âœ“ should return one repository
    âœ“ should be of proper resource type
    âœ“ should have the user_id set correctly
  In database 'test' getting an user named 'pavan' and it should have children repositories and when 'Parent.children()' is used
    âœ“ should return them
    âœ“ should be of proper resource type
    âœ“ should have the user_id set correctly
  In database 'test' getting an user named 'pavan' and it should have children repositories and when 'Parent.prototype.children()' is used
    âœ“ should return them
    âœ“ should be of proper resource type
    âœ“ should have the user_id set correctly
  In database 'test' getting an user named 'christian'
    âœ“ should be successful
  In database 'test' getting an user named 'christian' and when 'Parent.prototype.createChild()' is used successfully
    âœ“ should return the newly created object
    âœ“ should set the user_id correctly
  In database 'test' getting an user named 'christian' and when 'Parent.prototype.createChild()' is used successfully should create the record in the db
    âœ“ should respond with the right object
  In database 'test' getting an user named 'christian' and when 'Parent.prototype.createChild()' is used successfully and reloading parent object
    âœ“ should be successful
    âœ“ should contain the new child object in the array
  In database 'test' getting an user named 'marak'
    âœ“ should be successful
  In database 'test' getting an user named 'marak' and when 'Parent.createChild()' is used successfully
    âœ“ should return the newly created object
    âœ“ should set the user_id correctly
  In database 'test' getting an user named 'marak' and when 'Parent.createChild()' is used successfully should create the record in the db
    âœ“ should respond with the right object
  In database 'test' getting an user named 'marak' and when 'Parent.createChild()' is used successfully and reloading parent object
    âœ“ should be successful
    âœ“ should contain the new child object in the array
  In database 'test' getting a repository 'user/pavan/bullet'
    âœ“ should be successful
    âœ“ should have user_id 'pavan'
  In database 'test' getting a repository 'user/pavan/bullet' and when 'Child.prototype.parent()' is used
    âœ“ should return the parent
    âœ“ should be of proper resource type
    âœ“ should have the children ids
  In database 'test' getting an user named 'pavan'
    âœ“ should be successful
    âœ“ should have children repositories
[ { id: 'user/pavan/bullet',
    name: 'bullet',
    user_id: 'pavan',
    pull_request_ids: [],
    resource: 'Repository',
    _rev: '1-4b2ffef7898459fcc773c1edd9bc88eb' },
  { id: 'user/pavan/octonode',
    name: 'octonode',
    user_id: 'pavan',
    pull_request_ids: [],
    resource: 'Repository',
    _rev: '1-0aa233552ed472fc00a7eeeec07e7b9b' } ]
  In database 'test' getting an user named 'pavan' and when 'Child.byParent()' is used
    âœ“ should return the children
    âœ“ should be of proper resource type
    âœ“ should have the parent id set correctly
  In database 'test' getting a repository 'user/christian/issues'
    âœ“ should be successful
    âœ“ should have the correct user_id
  In database 'test' getting a repository 'user/christian/issues' and getting the parent
    âœ“ should be successful
{ id: 'user/christian/issues',
  name: 'issues',
  user_id: 'christian',
  pull_request_ids: [],
  resource: 'Repository',
  _rev: '1-2e3f2b26f397e2674997323e74d5c354' }
  In database 'test' getting a repository 'user/christian/issues' and getting the parent and destroying the child
    âœ“ should be successful
  In database 'test' getting a repository 'user/christian/issues' and getting the parent and destroying the child should result in parent
    âœ“ being modified in the db
  In database 'test' getting an user named 'christian'
    âœ“ should be successful
  In database 'test' getting an user named 'christian' and destroying it
    âœ“ should be successful
  In database 'test' getting an user named 'christian' and destroying it should result in his memberships
    âœ“ getting destroyed
  In database 'test' getting an user named 'christian' and destroying it should result in his followings
    âœ“ getting destroyed
  In database 'test' getting an user named 'christian' and destroying it should result in his repositories
    âœ“ getting destroyed
undefined
  In database 'test' pull requests of repositories of 'christian'
    âœ“ should be destroyed
  In database 'test' getting a forum named 'develop'
    âœ“ should be successful
  In database 'test' getting a forum named 'develop' when Child.prototype.Parent() is used
    âœ“ should return parent as 'null'
  In database 'test' getting a forum named 'develop' when Parent.prototype.children() is called
    âœ“ should return nodejitsu and flatiron
  In database 'test' getting a forum named 'nodejitsu'
    âœ“ should be successful
  In database 'test' getting a forum named 'nodejitsu' when Child.prototype.Parent() is used
    âœ“ should return parent forum
  In database 'test' getting a forum named 'nodejitsu' when Parent.prototype.createChild() is called
    âœ“ should be successful
  In database 'test' getting a forum named 'develop'
    âœ“ should be successful
  In database 'test' getting a forum named 'develop' and destroying it
    âœ“ should be successful
  In database 'test' getting a forum named 'develop' and destroying it should result in 'haibu' forum
    âœ“ getting destroyed
  
  â™¢ resourceful/validation 
  
  A Resource with complex validation when created with a valid object
    âœ“ it should be created correctly
  A Resource with complex validation when created with an invalid object
    âœ“ it should respond with the correct errors
  A Resource with complex validation when updated with an invalid object
    âœ“ it should respond with the correct errors
  A Resource with complex validation when updated with a valid object
    âœ“ it should be created correctly
  
  â™¢ resourceful 
  
  A Resource with methods
    âœ“ adds them to Resource
    âœ“ should be able to fire method with no schema and callback
    âœ“ should be able to fire method with no schema and no callback
    âœ“ should be able to fire method with one argument and a callback
    âœ“ should be able to fire method with two arguments and no callback
    âœ“ should be able to fire method method with oneargument and callback
    âœ“ should be able to fire method with single arguments and no callback
    âœ“ should error on firing method with invalid signature arguments and callback
    âœ“ should error on firing method with signature and no callback
    âœ“ should be able to fire method with good signature and callback
    âœ“ should be able to fire method with good signature and no callback
    âœ“ should error when firing methods with invalid schema values and no callback
    âœ“ should error when firing methods with invalid schema values with callback
  An instance of that Resource
    âœ“ adds them to Resource
    âœ“ should be able to fire method with no schema and callback
    âœ“ should be able to fire method with no schema and no callback
    âœ“ should be able to fire method with one argument and a callback
    âœ“ should be able to fire method with two arguments and no callback
    âœ“ should be able to fire method method with oneargument and callback
    âœ“ should be able to fire method with single arguments and no callback
    âœ“ should error on firing method with invalid signature arguments and callback
    âœ“ should error on firing method with signature and no callback
    âœ“ should be able to fire method with good signature and callback
    âœ“ should be able to fire method with good signature and no callback
    âœ“ should error when firing methods with invalid schema values and no callback
    âœ“ should error when firing methods with invalid schema values with callback
  
  â™¢ resourceful/engines/redis 
  
  In database "test" with defined resources "book"
    âœ“ will be successful
  In database "test" with defined resources "author"
    âœ“ will be successful
  In database "test" with defined resources "creature"
    âœ“ will be successful
[ { id: 'mat', age: 29, hair: 'black', resource: 'Author' },
  { id: 'bob', age: 35, hair: 'black', resource: 'Author' },
  { id: 'tim', age: 16, hair: 'brown', resource: 'Author' } ]
  In database "test" an Resource.all() request
    âœ— should respond with an array of all records 
        Â» [33m       
        [32mactual[39m [31mexpected[39m 
         
        [32mbob[39m[31mmat[39m 
        [39m[90m // engines-test.js:41[39m
'resourceful:test:id:author/bob ---> {"resource":"Author","age":35,"hair":"black","id":"author/bob"}'
  In database "test" a Resource.get() request when successful
    âœ“ should respond with a Resource instance
    âœ“ should respond with the right object
    âœ“ should not be a new record
'resourceful:test:id:author/david ---> null'
  In database "test" a Resource.get() request when unsuccessful
    âœ“ should respond with an error
  In database "test" a Resource.create() request
    âœ“ should return the newly created object
    âœ“ should not be a new record
'resourceful:test:id:author/han ---> {"id":"resourceful:test:id:author/han","age":30,"hair":"red","resource":"Author"}'
  In database "test" a Resource.create() request should create the record in the db
    âœ“ should respond with a Resource instance
    âœ“ should respond with the right object
    âœ“ should not be a new record
  In database "test" a diffirent Resource.create() request with the same id
    âœ“ should return the newly created object
    âœ“ should not be a new record
'resourceful:test:id:creature/han ---> {"id":"resourceful:test:id:creature/han","resource":"Creature"}'
  In database "test" a diffirent Resource.create() request with the same id should create the record in the db
    âœ“ should respond with a Resource instance
    âœ“ should respond with the right object
    âœ“ should not be a new record
'resourceful:test:id:author/han/*'
[]
  In database "test" and a Resource.destroy() request
    âœ“ should be successful
'resourceful:test:id:author/han ---> null'
  In database "test" and a Resource.destroy() request and Resource.get() the destroyed object
    âœ“ should respond with an error
  Instantiating a new instance
    âœ“ should be a new record
'resourceful:test:id:author/han ---> null'
  Instantiating a new instance should not be in the db
    âœ“ should respond with an error
  Instantiating a new instance
    âœ“ should be a new record
  Instantiating a new instance a Resource.prototype.save() request
    âœ“ should respond with a Resource instance
    âœ“ should respond with the right object
    âœ“ should not be a new record
'resourceful:test:id:author/han ---> {"id":"resourceful:test:id:author/han","age":30,"hair":"red","resource":"Author"}'
  Instantiating a new instance a Resource.prototype.save() request should create the object in db
    âœ“ should respond with a Resource instance
    âœ“ should respond with the right object
    âœ“ should not be a new record
  In database "test" a Resource.find() request when successful
    âœ“ should respond with an array of length 2
    âœ— should respond with an array of Resource instances 
        Â» [33m       
        [32mactual[39m [31mexpected[39m 
         
        [32mbob[39m[31mmat[39m 
        [39m[90m // engines-test.js:287[39m
    âœ“ should not be a new record
  In database "test" a Resource.find() request when unsuccessful
    âœ“ should respond with an empty array
'resourceful:test:id:author/bob ---> {"resource":"Author","age":35,"hair":"black","id":"author/bob"}'
  In database "test"
    âœ“ it should have 'bob' object
    âœ“ should not be a new record
'resourceful:test:id:author/bob ---> {"resource":"Author","age":35,"hair":"black","id":"author/bob"}'
  In database "test" a Resource.update() request when successful
    âœ“ should respond with a Resource instance
    âœ“ should respond with the right object
    âœ“ should not be a new record
'resourceful:test:id:author/bob ---> {"resource":"Author","age":31,"hair":"black","id":"resourceful:test:id:author/bob"}'
  In database "test" a Resource.update() request when successful should update the object in db
    âœ“ should respond with a Resource instance
    âœ“ should respond with the right object
    âœ“ should not be a new record
'resourceful:test:id:author/bob ---> {"resource":"Author","age":31,"hair":"black","id":"resourceful:test:id:author/bob"}'
  In database "test"
    âœ“ it should have 'bob' object
    âœ“ should not be a new record
  In database "test" a Resource.save() request when successful
    âœ“ should respond with a Resource instance
    âœ“ should respond with the right object
    âœ“ should not be a new record
'resourceful:test:id:author/bob ---> {"id":"resourceful:test:id:author/bob","age":35,"hair":"black","resource":"Author"}'
  In database "test" a Resource.save() request when successful should update the object in db
    âœ“ should respond with a Resource instance
    âœ“ should respond with the right object
    âœ“ should not be a new record
'resourceful:test:id:author/bob ---> {"id":"resourceful:test:id:author/bob","age":35,"hair":"black","resource":"Author"}'
  In database "test"
    âœ“ it should have 'bob' object
    âœ“ should not be a new record
  In database "test" a Resource.prototype.save() request
    âœ“ should respond with a Resource instance
    âœ“ should respond with the right object
    âœ“ should not be a new record
'resourceful:test:id:author/bob ---> {"id":"resourceful:test:id:author/bob","age":31,"hair":"red","resource":"Author"}'
  In database "test" a Resource.prototype.save() request should save the object in db
    âœ“ should respond with a Resource instance
    âœ“ should respond with the right object
    âœ“ should not be a new record
'resourceful:test:id:author/bob ---> {"id":"resourceful:test:id:author/bob","age":31,"hair":"red","resource":"Author"}'
  In database "test"
    âœ“ it should have 'bob' object
    âœ“ should not be a new record
'resourceful:test:id:author/bob ---> {"id":"resourceful:test:id:author/bob","age":31,"hair":"red","resource":"Author"}'
  In database "test" a Resource.prototype.update() request
    âœ“ should respond with a Resource instance
    âœ“ should respond with the right object
    âœ“ should not be a new record
'resourceful:test:id:author/bob ---> {"id":"resourceful:test:id:author/bob","age":35,"hair":"black","resource":"Author"}'
  In database "test" a Resource.prototype.update() request should update the object in db
    âœ“ should respond with a Resource instance
    âœ“ should respond with the right object
    âœ“ should not be a new record
'resourceful:test:id:author/han ---> {"id":"resourceful:test:id:author/han","age":30,"hair":"red","resource":"Author"}'
'resourceful:test:id:author/han/*'
[]
  In database "test" a Resource.prototype.destroy() request
    âœ“ should be successful
'resourceful:test:id:author/han ---> null'
  In database "test" a Resource.prototype.destroy() request should delete the object in db
    âœ“ should be missing
'resourceful:test:id:author/bob ---> {"id":"resourceful:test:id:author/bob","age":35,"hair":"black","resource":"Author"}'
'resourceful:test:id:author/bob ---> {"id":"resourceful:test:id:author/bob","age":35,"hair":"black","resource":"Author"}'
  In database "test" a Resource.prototype.reload() request
    âœ“ should respond with a Resource instance
    âœ“ should respond with the right object
    âœ“ should not be a new record
  Creating object without 'id'
    âœ“ should be successful
'resourceful:test:id:author/bob,resourceful:test:id:author/pun,resourceful:test:id:author/tim ---> {"id":"resourceful:test:id:author/bob","age":35,"hair":"black","resource":"Author"},,{"resource":"Author","age":16,"hair":"brown","id":"author/tim"}'
  Getting multiple objects from ids when one object isn't found
    âœ“ should be successful
  
  â™¢ resourceful/resource/view 
  
  A database containing articles and other resources
    âœ“ is created
  A database containing articles and other resources A Resource definition with filters
    âœ“ should respond to the filters
  A database containing articles and other resources A Resource definition with filters can be used to query the database: <by> 'cloudhead'
    âœ“ should return an array of Article records by 'cloudhead'
  A database containing articles and other resources A Resource definition with filters can be used to query the database: <by> 'yoda'
    âœ“ should return an array of Article records by 'yoda'
  A database containing articles and other resources A Resource definition with filters can be used to query the database: <published>
    âœ“ should return an array of all published Articles
  A database containing articles and other resources A Resource definition with filters can be used to query the database: <by> ['yoda', 'fitzgerald']
    âœ“ should return an array of Article records by 'yoda' or 'fitzgerald'
  A database containing articles and other resources A Resource definition with filters can be used to query the database: <all>
    âœ“ should return an array of all Article records
  A second Resource definition with filters
    âœ“ should have no side effects on the first resource views
  
  â™¢ resourceful/hooks/async 
  
  another save-able Resource with 'after' hooks on save
    âœ“ should just have the two 'after' hooks registered
  another create-able Resource with 'after' hooks on create
    âœ“ should just have the two 'after' hooks registered
  another create-able Resource with 'after' hooks on create when calling create() on an instance of Article
    âœ“ should trigger both hooks in the right order
  another save-able Resource with 'after' hooks on save when calling save() on an instance of Article
    âœ“ should trigger both hooks in the right order
  save-able Resource with 'before' hooks on save when calling save() on an instance of Article
    âœ“ should trigger both hooks in the right order
  create-able Resource with 'before' hooks on create when calling create() on an instance of Article
    âœ“ should trigger all hooks
    âœ“ should trigger all hooks in the right order
    âœ“ should have modified attributes
  
  â™¢ resourceful/deferredRelationship 
  
  Defining a child resource of non-defined parent
    âœ“ should be successful
    âœ“ should have no parent
  Defining a child resource of non-defined parent and defining the parent resource
    âœ“ should be successful
    âœ“ should have child set
    âœ“ and child should have parent set
  
  â™¢ resourceful 
  
  Resource() returns a Resource factory
    âœ“ which is a function
    âœ“ and has the create/get/all/find methods
  Resource('article') with a function returns an Article factory
    âœ“ with the resource name set
    âœ“ and access to the data attribute
  Resource() returns a Resource factory which can be called
    âœ“ to return Resource instances which have prototype methods
  Resource('article') with a function returns an Article factory which can be called
    âœ“ returning Article instances
    âœ“ returning an object which inherits from Resource's prototype
    âœ“ and doesn't have a value for key
  Default Resource instances
    âœ“ have the resource, define and property methods
    âœ“ resource should be set to 'Resource'
    âœ“ the properties accessor returns an empty object
    âœ“ the key accessor is set to 'id' by default
  A Resource with a couple of properties
    âœ“ adds them to Resource.properties
  A Resource with duplicate properties
    âœ“ only keeps the last copy
  A Resource with a couple of properties When instantiated
    âœ“ should respond to toString()
    âœ“ should respond to toJSON()
    âœ“ should respond to safeJSON() without filtered properties
    âœ“ should return the attributes, when Object.keys is called
    âœ“ should set the unspecified values to undefined
  A Resource with sanitized _id should be saved
    âœ“ and be found by non-sanitized_id
  The property() method returns an object which implements
    âœ“ requires
    âœ“ type
    âœ“ required
    âœ“ unique
    âœ“ title
    âœ“ description
    âœ“ format
    âœ“ storageName
    âœ“ conform
    âœ“ lazy
  The property() method with a 'number' type
    âœ“ return an object which doesn't implement String 'definers'
  Engine can be initialised by name
    âœ“ or without
  Engine can be initialised by reference
    âœ“ or without
  The property() method with a 'string' type returns an object which implements
    âœ“ pattern
    âœ“ minLength
    âœ“ maxLength
    âœ“ length
  The property() method with a 'number' type returns an object which implements
    âœ“ minimum
    âœ“ maximum
    âœ“ within
  Engine can be initialised by name with options
    âœ“ uri
    âœ“ uri + port
    âœ“ uri + port + database
  Engine can be initialised by reference with options
    âœ“ uri
    âœ“ uri + port
    âœ“ uri + port + database
  The property() method with a 'string' type returns an object which implements sanitize('upper')
    âœ“ and pass check
  The property() method with a 'string' type returns an object which implements sanitize('lower')
    âœ“ and pass check
  The property() method with a 'string' type returns an object which implements sanitize('capitalize')
    âœ“ and pass check
  The property() method with a 'string' type returns an object which implements sanitize('pluralize')
    âœ“ and pass check
  The property() method with a 'string' type returns an object which implements sanitize('upper').sanitize('replace')
    âœ“ and pass check
  The property() method with a 'string' type returns an object which implements sanitize('replace')
    âœ“ and pass check
  The property() method with a 'string' type returns an object which implements sanitize('lower').sanitize('prefix')
    âœ“ and pass check
  The property() method with a 'number' type returns an object which implements sanitize('round')
    âœ“ and pass check
  The property() method with a 'number' type returns an object which implements sanitize(function () {...})
    âœ“ and pass check
  The property() method with a 'number' type returns an object which implements sanitize(function () {...}) with changing property's value
    âœ“ and pass check
  Defining a Resource schema with property()
    âœ“ should add an entry to properties
    âœ“ should default to type:'string'
  Defining a Resource schema with object()
    âœ“ should be type:'object'
  Defining a Resource schema with string()
    âœ“ should add an entry to properties
    âœ“ should be type:'string'
  Defining a Resource schema with number()
    âœ“ should add an entry to properties
    âœ“ should be type:'number'
  Defining a Resource schema with bool()
    âœ“ should add an entry to properties
    âœ“ should be type:'boolean'
  Defining a Resource schema with array()
    âœ“ should add an entry to properties
    âœ“ should be type:'array'
  Defining a Resource schema with constructor's call
    âœ“ should add entries to properties
  Defining a Resource schema with define()
    âœ“ should add entries to properties
  Defining a Resource schema by chaining attribute setters
    âœ“ should work just the same
  Defining a Resource schema by chaining attribute setters with string()
    âœ“ should work just the same
  
  â™¢ resourceful/resource/cache 
  
  When creating an instance, and saving it and then loading it back up with get()
    âœ“ it should return the previous instance
  When creating an instance, and saving it and then loading it back up with find()
    âœ“ it should return the previous instance
  When creating an instance, and saving it and then clearing the cache and loading it back up with get()
    âœ“ it should return a new instance
 
âœ— Errored Â» 394 honored âˆ™ 8 broken âˆ™ 1 errored (2.587s) 
  
